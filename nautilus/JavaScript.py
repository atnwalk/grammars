ctx.rule(u'START', u'{PROGRAM}')
ctx.rule(u'PROGRAM', u'{AUX_1}')
ctx.rule(u'AUX_1', u'{GROUP_0}')
ctx.rule(u'AUX_1', u'{GROUP_0}{AUX_1}')
ctx.rule(u'GROUP_0', u'{STATEMENT}\n')
ctx.rule(u'OBJECT', u'{IDENTIFIER}')
ctx.rule(u'OBJECT', u'\\{{OBJMEMBER}\\}')
ctx.rule(u'OBJECT', u'\\{\\}')
ctx.rule(u'OBJMEMBER', u'{VAR}: {LITERAL}{AUX_2}')
ctx.rule(u'AUX_2', u'')
ctx.rule(u'AUX_2', u'{GROUP_1}')
ctx.rule(u'GROUP_1', u', {OBJMEMBER}')
ctx.rule(u'VAR', u'a')
ctx.rule(u'VAR', u'b')
ctx.rule(u'VAR', u'c')
ctx.rule(u'VAR', u'd')
ctx.rule(u'VAR', u'e')
ctx.rule(u'VAR', u'f')
ctx.rule(u'VAR', u'g')
ctx.rule(u'VAR', u'h')
ctx.rule(u'METHODNAME', u'{IDENTIFIER}')
ctx.rule(u'METHODNAME', u'eval')
ctx.rule(u'METHODNAME', u'uneval')
ctx.rule(u'METHODNAME', u'isFinite')
ctx.rule(u'METHODNAME', u'isNaN')
ctx.rule(u'METHODNAME', u'parseFloat')
ctx.rule(u'METHODNAME', u'parseInt')
ctx.rule(u'METHODNAME', u'decodeURI')
ctx.rule(u'METHODNAME', u'decodeURIComponent')
ctx.rule(u'METHODNAME', u'encodeURI')
ctx.rule(u'METHODNAME', u'encodeURIComponent')
ctx.rule(u'METHODNAME', u'escape')
ctx.rule(u'METHODNAME', u'unescape')
ctx.rule(u'METHODNAME', u'assign')
ctx.rule(u'METHODNAME', u'create')
ctx.rule(u'METHODNAME', u'defineProperty')
ctx.rule(u'METHODNAME', u'defineProperties')
ctx.rule(u'METHODNAME', u'entries')
ctx.rule(u'METHODNAME', u'freeze')
ctx.rule(u'METHODNAME', u'getOwnPropertyDescriptor')
ctx.rule(u'METHODNAME', u'getOwnPropertyDescriptors')
ctx.rule(u'METHODNAME', u'getOwnPropertyNames')
ctx.rule(u'METHODNAME', u'getOwnPropertySymbols')
ctx.rule(u'METHODNAME', u'getPrototypeOf')
ctx.rule(u'METHODNAME', u'is')
ctx.rule(u'METHODNAME', u'isExtensible')
ctx.rule(u'METHODNAME', u'isFrozen')
ctx.rule(u'METHODNAME', u'isSealed')
ctx.rule(u'METHODNAME', u'keys')
ctx.rule(u'METHODNAME', u'preventExtensions')
ctx.rule(u'METHODNAME', u'seal')
ctx.rule(u'METHODNAME', u'setPrototypeOf')
ctx.rule(u'METHODNAME', u'values')
ctx.rule(u'METHODNAME', u'delete')
ctx.rule(u'METHODNAME', u'__defineGetter__')
ctx.rule(u'METHODNAME', u'__defineSetter__')
ctx.rule(u'METHODNAME', u'__lookupGetter__')
ctx.rule(u'METHODNAME', u'__lookupSetter__')
ctx.rule(u'METHODNAME', u'{HASOWNPROPERTY}')
ctx.rule(u'METHODNAME', u'isPrototypeOf')
ctx.rule(u'METHODNAME', u'propertyIsEnumerable')
ctx.rule(u'METHODNAME', u'toSource')
ctx.rule(u'METHODNAME', u'toString')
ctx.rule(u'METHODNAME', u'unwatch')
ctx.rule(u'METHODNAME', u'valueOf')
ctx.rule(u'METHODNAME', u'watch')
ctx.rule(u'METHODNAME', u'apply')
ctx.rule(u'METHODNAME', u'bind')
ctx.rule(u'METHODNAME', u'call')
ctx.rule(u'METHODNAME', u'isGenerator')
ctx.rule(u'METHODNAME', u'for')
ctx.rule(u'METHODNAME', u'keyFor')
ctx.rule(u'METHODNAME', u'stringify')
ctx.rule(u'METHODNAME', u'isInteger')
ctx.rule(u'METHODNAME', u'isSafeInteger')
ctx.rule(u'METHODNAME', u'toInteger')
ctx.rule(u'METHODNAME', u'toExponential')
ctx.rule(u'METHODNAME', u'toFixed')
ctx.rule(u'METHODNAME', u'toPrecision')
ctx.rule(u'METHODNAME', u'abs')
ctx.rule(u'METHODNAME', u'acos')
ctx.rule(u'METHODNAME', u'acosh')
ctx.rule(u'METHODNAME', u'asin')
ctx.rule(u'METHODNAME', u'asinh')
ctx.rule(u'METHODNAME', u'atan')
ctx.rule(u'METHODNAME', u'atanh')
ctx.rule(u'METHODNAME', u'atan2')
ctx.rule(u'METHODNAME', u'cbrt')
ctx.rule(u'METHODNAME', u'ceil')
ctx.rule(u'METHODNAME', u'clz32')
ctx.rule(u'METHODNAME', u'cos')
ctx.rule(u'METHODNAME', u'cosh')
ctx.rule(u'METHODNAME', u'exp')
ctx.rule(u'METHODNAME', u'expm1')
ctx.rule(u'METHODNAME', u'floor')
ctx.rule(u'METHODNAME', u'fround')
ctx.rule(u'METHODNAME', u'hypot')
ctx.rule(u'METHODNAME', u'imul')
ctx.rule(u'METHODNAME', u'log')
ctx.rule(u'METHODNAME', u'log1p')
ctx.rule(u'METHODNAME', u'log10')
ctx.rule(u'METHODNAME', u'log2')
ctx.rule(u'METHODNAME', u'max')
ctx.rule(u'METHODNAME', u'min')
ctx.rule(u'METHODNAME', u'pow')
ctx.rule(u'METHODNAME', u'random')
ctx.rule(u'METHODNAME', u'round')
ctx.rule(u'METHODNAME', u'sign')
ctx.rule(u'METHODNAME', u'sin')
ctx.rule(u'METHODNAME', u'sinh')
ctx.rule(u'METHODNAME', u'sqrt')
ctx.rule(u'METHODNAME', u'tan')
ctx.rule(u'METHODNAME', u'tanh')
ctx.rule(u'METHODNAME', u'trunc')
ctx.rule(u'METHODNAME', u'now')
ctx.rule(u'METHODNAME', u'parse')
ctx.rule(u'METHODNAME', u'UTC')
ctx.rule(u'METHODNAME', u'getDate')
ctx.rule(u'METHODNAME', u'getDay')
ctx.rule(u'METHODNAME', u'getFullYear')
ctx.rule(u'METHODNAME', u'getHours')
ctx.rule(u'METHODNAME', u'getMilliseconds')
ctx.rule(u'METHODNAME', u'getMinutes')
ctx.rule(u'METHODNAME', u'getMonth')
ctx.rule(u'METHODNAME', u'getSeconds')
ctx.rule(u'METHODNAME', u'getTime')
ctx.rule(u'METHODNAME', u'getTimezoneOffset')
ctx.rule(u'METHODNAME', u'getUTCDate')
ctx.rule(u'METHODNAME', u'getUTCDay')
ctx.rule(u'METHODNAME', u'getUTCFullYear')
ctx.rule(u'METHODNAME', u'getUTCHours')
ctx.rule(u'METHODNAME', u'getUTCMilliseconds')
ctx.rule(u'METHODNAME', u'getUTCMinutes')
ctx.rule(u'METHODNAME', u'getUTCMonth')
ctx.rule(u'METHODNAME', u'getUTCSeconds')
ctx.rule(u'METHODNAME', u'getYear')
ctx.rule(u'METHODNAME', u'setDate')
ctx.rule(u'METHODNAME', u'setFullYear')
ctx.rule(u'METHODNAME', u'setHours')
ctx.rule(u'METHODNAME', u'setMilliseconds')
ctx.rule(u'METHODNAME', u'setMinutes')
ctx.rule(u'METHODNAME', u'setMonth')
ctx.rule(u'METHODNAME', u'setSeconds')
ctx.rule(u'METHODNAME', u'setTime')
ctx.rule(u'METHODNAME', u'setUTCDate')
ctx.rule(u'METHODNAME', u'setUTCFullYear')
ctx.rule(u'METHODNAME', u'setUTCHours')
ctx.rule(u'METHODNAME', u'setUTCMilliseconds')
ctx.rule(u'METHODNAME', u'setUTCMinutes')
ctx.rule(u'METHODNAME', u'setUTCMonth')
ctx.rule(u'METHODNAME', u'setUTCSeconds')
ctx.rule(u'METHODNAME', u'setYear')
ctx.rule(u'METHODNAME', u'toDateString')
ctx.rule(u'METHODNAME', u'toISOString')
ctx.rule(u'METHODNAME', u'toJSON')
ctx.rule(u'METHODNAME', u'toGMTString')
ctx.rule(u'METHODNAME', u'toLocaleDateString')
ctx.rule(u'METHODNAME', u'toLocaleFormat')
ctx.rule(u'METHODNAME', u'toLocaleString')
ctx.rule(u'METHODNAME', u'toLocaleTimeString')
ctx.rule(u'METHODNAME', u'toTimeString')
ctx.rule(u'METHODNAME', u'toUTCString')
ctx.rule(u'METHODNAME', u'indexOf')
ctx.rule(u'METHODNAME', u'substring')
ctx.rule(u'METHODNAME', u'charAt')
ctx.rule(u'METHODNAME', u'strcmp')
ctx.rule(u'METHODNAME', u'fromCharCode')
ctx.rule(u'METHODNAME', u'fromCodePoint')
ctx.rule(u'METHODNAME', u'raw')
ctx.rule(u'METHODNAME', u'charCodeAt')
ctx.rule(u'METHODNAME', u'slice')
ctx.rule(u'METHODNAME', u'codePointAt')
ctx.rule(u'METHODNAME', u'concat')
ctx.rule(u'METHODNAME', u'includes')
ctx.rule(u'METHODNAME', u'endsWith')
ctx.rule(u'METHODNAME', u'lastIndexOf')
ctx.rule(u'METHODNAME', u'localeCompare')
ctx.rule(u'METHODNAME', u'match')
ctx.rule(u'METHODNAME', u'normalize')
ctx.rule(u'METHODNAME', u'padEnd')
ctx.rule(u'METHODNAME', u'padStart')
ctx.rule(u'METHODNAME', u'quote')
ctx.rule(u'METHODNAME', u'repeat')
ctx.rule(u'METHODNAME', u'replace')
ctx.rule(u'METHODNAME', u'search')
ctx.rule(u'METHODNAME', u'split')
ctx.rule(u'METHODNAME', u'startsWith')
ctx.rule(u'METHODNAME', u'substr')
ctx.rule(u'METHODNAME', u'toLocaleLowerCase')
ctx.rule(u'METHODNAME', u'toLocaleUpperCase')
ctx.rule(u'METHODNAME', u'toLowerCase')
ctx.rule(u'METHODNAME', u'toUpperCase')
ctx.rule(u'METHODNAME', u'trim')
ctx.rule(u'METHODNAME', u'trimleft')
ctx.rule(u'METHODNAME', u'trimright')
ctx.rule(u'METHODNAME', u'anchor')
ctx.rule(u'METHODNAME', u'big')
ctx.rule(u'METHODNAME', u'blink')
ctx.rule(u'METHODNAME', u'bold')
ctx.rule(u'METHODNAME', u'fixed')
ctx.rule(u'METHODNAME', u'fontcolor')
ctx.rule(u'METHODNAME', u'fontsize')
ctx.rule(u'METHODNAME', u'italics')
ctx.rule(u'METHODNAME', u'link')
ctx.rule(u'METHODNAME', u'small')
ctx.rule(u'METHODNAME', u'strike')
ctx.rule(u'METHODNAME', u'sub')
ctx.rule(u'METHODNAME', u'sup')
ctx.rule(u'METHODNAME', u'compile')
ctx.rule(u'METHODNAME', u'exec')
ctx.rule(u'METHODNAME', u'test')
ctx.rule(u'METHODNAME', u'from')
ctx.rule(u'METHODNAME', u'isArray')
ctx.rule(u'METHODNAME', u'of')
ctx.rule(u'METHODNAME', u'copyWithin')
ctx.rule(u'METHODNAME', u'fill')
ctx.rule(u'METHODNAME', u'pop')
ctx.rule(u'METHODNAME', u'push')
ctx.rule(u'METHODNAME', u'reverse')
ctx.rule(u'METHODNAME', u'shift')
ctx.rule(u'METHODNAME', u'sort')
ctx.rule(u'METHODNAME', u'splice')
ctx.rule(u'METHODNAME', u'unshift')
ctx.rule(u'METHODNAME', u'join')
ctx.rule(u'METHODNAME', u'every')
ctx.rule(u'METHODNAME', u'filter')
ctx.rule(u'METHODNAME', u'findIndex')
ctx.rule(u'METHODNAME', u'forEach')
ctx.rule(u'METHODNAME', u'map')
ctx.rule(u'METHODNAME', u'reduce')
ctx.rule(u'METHODNAME', u'reduceRight')
ctx.rule(u'METHODNAME', u'some')
ctx.rule(u'METHODNAME', u'move')
ctx.rule(u'METHODNAME', u'getInt8')
ctx.rule(u'METHODNAME', u'getUint8')
ctx.rule(u'METHODNAME', u'getInt16')
ctx.rule(u'METHODNAME', u'getUint16')
ctx.rule(u'METHODNAME', u'getInt32')
ctx.rule(u'METHODNAME', u'getUint32')
ctx.rule(u'METHODNAME', u'getFloat32')
ctx.rule(u'METHODNAME', u'getFloat64')
ctx.rule(u'METHODNAME', u'setInt8')
ctx.rule(u'METHODNAME', u'setUint8')
ctx.rule(u'METHODNAME', u'setInt16')
ctx.rule(u'METHODNAME', u'setUint16')
ctx.rule(u'METHODNAME', u'setInt32')
ctx.rule(u'METHODNAME', u'setUint32')
ctx.rule(u'METHODNAME', u'setFloat32')
ctx.rule(u'METHODNAME', u'setFloat64')
ctx.rule(u'METHODNAME', u'isView')
ctx.rule(u'METHODNAME', u'transfer')
ctx.rule(u'METHODNAME', u'clear')
ctx.rule(u'METHODNAME', u'get')
ctx.rule(u'METHODNAME', u'has')
ctx.rule(u'METHODNAME', u'set')
ctx.rule(u'METHODNAME', u'add')
ctx.rule(u'METHODNAME', u'splat')
ctx.rule(u'METHODNAME', u'check')
ctx.rule(u'METHODNAME', u'extractLane')
ctx.rule(u'METHODNAME', u'replaceLane')
ctx.rule(u'METHODNAME', u'load')
ctx.rule(u'METHODNAME', u'load1')
ctx.rule(u'METHODNAME', u'load2')
ctx.rule(u'METHODNAME', u'load3')
ctx.rule(u'METHODNAME', u'store')
ctx.rule(u'METHODNAME', u'store1')
ctx.rule(u'METHODNAME', u'store2')
ctx.rule(u'METHODNAME', u'store3')
ctx.rule(u'METHODNAME', u'addSaturate')
ctx.rule(u'METHODNAME', u'div')
ctx.rule(u'METHODNAME', u'mul')
ctx.rule(u'METHODNAME', u'neg')
ctx.rule(u'METHODNAME', u'reciprocalApproximation')
ctx.rule(u'METHODNAME', u'reciprocalSqrtApproximation')
ctx.rule(u'METHODNAME', u'subSaturate')
ctx.rule(u'METHODNAME', u'shuffle')
ctx.rule(u'METHODNAME', u'swizzle')
ctx.rule(u'METHODNAME', u'maxNum')
ctx.rule(u'METHODNAME', u'minNum')
ctx.rule(u'METHODNAME', u'select')
ctx.rule(u'METHODNAME', u'equal')
ctx.rule(u'METHODNAME', u'notEqual')
ctx.rule(u'METHODNAME', u'lessThan')
ctx.rule(u'METHODNAME', u'lessThanOrEqual')
ctx.rule(u'METHODNAME', u'greaterThan')
ctx.rule(u'METHODNAME', u'greaterThanOrEqual')
ctx.rule(u'METHODNAME', u'and')
ctx.rule(u'METHODNAME', u'or')
ctx.rule(u'METHODNAME', u'xor')
ctx.rule(u'METHODNAME', u'not')
ctx.rule(u'METHODNAME', u'shiftLeftByScalar')
ctx.rule(u'METHODNAME', u'shiftRightByScalar')
ctx.rule(u'METHODNAME', u'allTrue')
ctx.rule(u'METHODNAME', u'anyTrue')
ctx.rule(u'METHODNAME', u'fromFloat32x4')
ctx.rule(u'METHODNAME', u'fromFloat32x4Bits')
ctx.rule(u'METHODNAME', u'fromFloat64x2Bits')
ctx.rule(u'METHODNAME', u'fromInt32x4')
ctx.rule(u'METHODNAME', u'fromInt32x4Bits')
ctx.rule(u'METHODNAME', u'fromInt16x8Bits')
ctx.rule(u'METHODNAME', u'fromInt8x16Bits')
ctx.rule(u'METHODNAME', u'fromUint32x4')
ctx.rule(u'METHODNAME', u'fromUint32x4Bits')
ctx.rule(u'METHODNAME', u'fromUint16x8Bits')
ctx.rule(u'METHODNAME', u'fromUint8x16Bits')
ctx.rule(u'METHODNAME', u'compareExchange')
ctx.rule(u'METHODNAME', u'exchange')
ctx.rule(u'METHODNAME', u'wait')
ctx.rule(u'METHODNAME', u'wake')
ctx.rule(u'METHODNAME', u'isLockFree')
ctx.rule(u'METHODNAME', u'all')
ctx.rule(u'METHODNAME', u'race')
ctx.rule(u'METHODNAME', u'reject')
ctx.rule(u'METHODNAME', u'resolve')
ctx.rule(u'METHODNAME', u'catch')
ctx.rule(u'METHODNAME', u'then')
ctx.rule(u'METHODNAME', u'finally')
ctx.rule(u'METHODNAME', u'next')
ctx.rule(u'METHODNAME', u'return')
ctx.rule(u'METHODNAME', u'throw')
ctx.rule(u'METHODNAME', u'close')
ctx.rule(u'METHODNAME', u'send')
ctx.rule(u'METHODNAME', u'construct')
ctx.rule(u'METHODNAME', u'deleteProperty')
ctx.rule(u'METHODNAME', u'ownKeys')
ctx.rule(u'METHODNAME', u'getCanonicalLocales')
ctx.rule(u'METHODNAME', u'supportedLocalesOf')
ctx.rule(u'METHODNAME', u'resolvedOptions')
ctx.rule(u'METHODNAME', u'formatToParts')
ctx.rule(u'METHODNAME', u'instantiate')
ctx.rule(u'METHODNAME', u'instantiateStreaming')
ctx.rule(u'METHODNAME', u'compileStreaming')
ctx.rule(u'METHODNAME', u'validate')
ctx.rule(u'METHODNAME', u'customSections')
ctx.rule(u'METHODNAME', u'exports')
ctx.rule(u'METHODNAME', u'imports')
ctx.rule(u'METHODNAME', u'grow')
ctx.rule(u'METHODNAME', u'super')
ctx.rule(u'METHODNAME', u'void')
ctx.rule(u'METHODNAME', u'in')
ctx.rule(u'METHODNAME', u'instanceof')
ctx.rule(u'METHODNAME', u'print')
ctx.rule(u'METHODPARAMETERS', u'{EXPR}')
ctx.rule(u'METHODPARAMETERS', u'{VAR}={EXPR}')
ctx.rule(u'METHODPARAMETERS', u'{EXPR},{METHODPARAMETERS}')
ctx.rule(u'METHODPARAMETERS', u'{VAR}={EXPR},{METHODPARAMETERS}')
ctx.rule(u'METHODCALL', u'{OBJECT}{PROPERTY}{METHODCALL1}')
ctx.rule(u'METHODCALL', u'{METHODNAME}{ARGS}{METHODCALL1}')
ctx.rule(u'METHODCALL', u'SIMD.{SIMDTYPE}.{SIMDFUNCTION}{ARGS}{METHODCALL1}')
ctx.rule(u'METHODCALL1', u'{AUX_3}')
ctx.rule(u'AUX_3', u'')
ctx.rule(u'AUX_3', u'{GROUP_2}')
ctx.rule(u'GROUP_2', u'{METHODNAME}{ARGS}{METHODCALL1}')
ctx.rule(u'GROUP_2', u'{SIMDFUNCTION}{ARGS}{METHODCALL1}')
ctx.rule(u'PROPERTY', u'.length{AUX_4}')
ctx.rule(u'AUX_4', u'')
ctx.rule(u'AUX_4', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.prototype{AUX_5}')
ctx.rule(u'AUX_5', u'')
ctx.rule(u'AUX_5', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.constructor{AUX_6}')
ctx.rule(u'AUX_6', u'')
ctx.rule(u'AUX_6', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.__proto__{AUX_7}')
ctx.rule(u'AUX_7', u'')
ctx.rule(u'AUX_7', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.__noSuchMethod__{AUX_8}')
ctx.rule(u'AUX_8', u'')
ctx.rule(u'AUX_8', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.__count__{AUX_9}')
ctx.rule(u'AUX_9', u'')
ctx.rule(u'AUX_9', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.__parent__{AUX_10}')
ctx.rule(u'AUX_10', u'')
ctx.rule(u'AUX_10', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.arguments{AUX_11}')
ctx.rule(u'AUX_11', u'')
ctx.rule(u'AUX_11', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.arity{AUX_12}')
ctx.rule(u'AUX_12', u'')
ctx.rule(u'AUX_12', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.caller{AUX_13}')
ctx.rule(u'AUX_13', u'')
ctx.rule(u'AUX_13', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.name{AUX_14}')
ctx.rule(u'AUX_14', u'')
ctx.rule(u'AUX_14', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.displayName{AUX_15}')
ctx.rule(u'AUX_15', u'')
ctx.rule(u'AUX_15', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.iterator{AUX_16}')
ctx.rule(u'AUX_16', u'')
ctx.rule(u'AUX_16', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.asyncIterator{AUX_17}')
ctx.rule(u'AUX_17', u'')
ctx.rule(u'AUX_17', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.match{AUX_18}')
ctx.rule(u'AUX_18', u'')
ctx.rule(u'AUX_18', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.replace{AUX_19}')
ctx.rule(u'AUX_19', u'')
ctx.rule(u'AUX_19', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.search{AUX_20}')
ctx.rule(u'AUX_20', u'')
ctx.rule(u'AUX_20', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.split{AUX_21}')
ctx.rule(u'AUX_21', u'')
ctx.rule(u'AUX_21', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.hasInstance{AUX_22}')
ctx.rule(u'AUX_22', u'')
ctx.rule(u'AUX_22', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.isConcatSpreadable{AUX_23}')
ctx.rule(u'AUX_23', u'')
ctx.rule(u'AUX_23', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.unscopables{AUX_24}')
ctx.rule(u'AUX_24', u'')
ctx.rule(u'AUX_24', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.species{AUX_25}')
ctx.rule(u'AUX_25', u'')
ctx.rule(u'AUX_25', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.toPrimitive{AUX_26}')
ctx.rule(u'AUX_26', u'')
ctx.rule(u'AUX_26', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.toStringTag{AUX_27}')
ctx.rule(u'AUX_27', u'')
ctx.rule(u'AUX_27', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.fileName{AUX_28}')
ctx.rule(u'AUX_28', u'')
ctx.rule(u'AUX_28', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.lineNumber{AUX_29}')
ctx.rule(u'AUX_29', u'')
ctx.rule(u'AUX_29', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.columnNumber{AUX_30}')
ctx.rule(u'AUX_30', u'')
ctx.rule(u'AUX_30', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.message{AUX_31}')
ctx.rule(u'AUX_31', u'')
ctx.rule(u'AUX_31', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.name{AUX_32}')
ctx.rule(u'AUX_32', u'')
ctx.rule(u'AUX_32', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.EPSILON{AUX_33}')
ctx.rule(u'AUX_33', u'')
ctx.rule(u'AUX_33', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.MAX_SAFE_INTEGER{AUX_34}')
ctx.rule(u'AUX_34', u'')
ctx.rule(u'AUX_34', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.MAX_VALUE{AUX_35}')
ctx.rule(u'AUX_35', u'')
ctx.rule(u'AUX_35', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.MIN_SAFE_INTEGER{AUX_36}')
ctx.rule(u'AUX_36', u'')
ctx.rule(u'AUX_36', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.MIN_VALUE{AUX_37}')
ctx.rule(u'AUX_37', u'')
ctx.rule(u'AUX_37', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.NaN{AUX_38}')
ctx.rule(u'AUX_38', u'')
ctx.rule(u'AUX_38', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.NEGATIVE_INFINITY{AUX_39}')
ctx.rule(u'AUX_39', u'')
ctx.rule(u'AUX_39', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.POSITIVE_INFINITY{AUX_40}')
ctx.rule(u'AUX_40', u'')
ctx.rule(u'AUX_40', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.E{AUX_41}')
ctx.rule(u'AUX_41', u'')
ctx.rule(u'AUX_41', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.LN2{AUX_42}')
ctx.rule(u'AUX_42', u'')
ctx.rule(u'AUX_42', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.LN10{AUX_43}')
ctx.rule(u'AUX_43', u'')
ctx.rule(u'AUX_43', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.LOG2E{AUX_44}')
ctx.rule(u'AUX_44', u'')
ctx.rule(u'AUX_44', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.LOG10E{AUX_45}')
ctx.rule(u'AUX_45', u'')
ctx.rule(u'AUX_45', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.PI{AUX_46}')
ctx.rule(u'AUX_46', u'')
ctx.rule(u'AUX_46', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.SQRT1_2{AUX_47}')
ctx.rule(u'AUX_47', u'')
ctx.rule(u'AUX_47', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.SQRT2{AUX_48}')
ctx.rule(u'AUX_48', u'')
ctx.rule(u'AUX_48', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.flags{AUX_49}')
ctx.rule(u'AUX_49', u'')
ctx.rule(u'AUX_49', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.global{AUX_50}')
ctx.rule(u'AUX_50', u'')
ctx.rule(u'AUX_50', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.ignoreCase{AUX_51}')
ctx.rule(u'AUX_51', u'')
ctx.rule(u'AUX_51', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.multiline{AUX_52}')
ctx.rule(u'AUX_52', u'')
ctx.rule(u'AUX_52', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.source{AUX_53}')
ctx.rule(u'AUX_53', u'')
ctx.rule(u'AUX_53', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.sticky{AUX_54}')
ctx.rule(u'AUX_54', u'')
ctx.rule(u'AUX_54', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.unicode{AUX_55}')
ctx.rule(u'AUX_55', u'')
ctx.rule(u'AUX_55', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'[{DECIMALNUMBER}]{AUX_56}')
ctx.rule(u'AUX_56', u'')
ctx.rule(u'AUX_56', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'[{STRING}]{AUX_57}')
ctx.rule(u'AUX_57', u'')
ctx.rule(u'AUX_57', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.buffer{AUX_58}')
ctx.rule(u'AUX_58', u'')
ctx.rule(u'AUX_58', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.byteLength{AUX_59}')
ctx.rule(u'AUX_59', u'')
ctx.rule(u'AUX_59', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.byteOffset{AUX_60}')
ctx.rule(u'AUX_60', u'')
ctx.rule(u'AUX_60', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.BYTES_PER_ELEMENT{AUX_61}')
ctx.rule(u'AUX_61', u'')
ctx.rule(u'AUX_61', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.compare{AUX_62}')
ctx.rule(u'AUX_62', u'')
ctx.rule(u'AUX_62', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.format{AUX_63}')
ctx.rule(u'AUX_63', u'')
ctx.rule(u'AUX_63', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.callee{AUX_64}')
ctx.rule(u'AUX_64', u'')
ctx.rule(u'AUX_64', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.caller{AUX_65}')
ctx.rule(u'AUX_65', u'')
ctx.rule(u'AUX_65', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.memory{AUX_66}')
ctx.rule(u'AUX_66', u'')
ctx.rule(u'AUX_66', u'{PROPERTY}')
ctx.rule(u'PROPERTY', u'.exports{AUX_67}')
ctx.rule(u'AUX_67', u'')
ctx.rule(u'AUX_67', u'{PROPERTY}')
ctx.rule(u'ARGS', u'()')
ctx.rule(u'ARGS', u'({EXPR}{AUX_68})')
ctx.rule(u'AUX_68', u'')
ctx.rule(u'AUX_68', u'{GROUP_3}{AUX_68}')
ctx.rule(u'GROUP_3', u',{EXPR}')
ctx.rule(u'IDENTIFIERLIST', u'{IDENTIFIER}, {IDENTIFIERLIST}')
ctx.rule(u'IDENTIFIERLIST', u'({IDENTIFIERLIST}),{IDENTIFIERLIST}')
ctx.rule(u'IDENTIFIERLIST', u'{IDENTIFIER}')
ctx.rule(u'STATEMENT', u'{EXPR};')
ctx.rule(u'STATEMENT', u'{VAR}:')
ctx.rule(u'STATEMENT', u'{DECLARATION}')
ctx.rule(u'STATEMENT', u'void {EXPR};')
ctx.rule(u'STATEMENT', u'return {EXPR};')
ctx.rule(u'STATEMENT', u'{CLASSDEF}')
ctx.rule(u'STATEMENT', u'{FUNCTIONDEF}')
ctx.rule(u'STATEMENT', u'async {FUNCTIONDEF}')
ctx.rule(u'STATEMENT', u'export {EXPR};')
ctx.rule(u'STATEMENT', u'export {FUNCTIONDEF}')
ctx.rule(u'STATEMENT', u'export {DECLARATION}')
ctx.rule(u'STATEMENT', u'import {IMPORTNAME} as {METHODNAME} from {STRING}')
ctx.rule(u'DECLARATION', u'{DECLARATIONTYPE} {VAR} = {EXPR};')
ctx.rule(u'DECLARATION', u'{DECLARATIONTYPE} {VAR}{PROPERTY} = {EXPR};')
ctx.rule(u'DECLARATION', u'{DECLARATIONTYPE} {VAR}[{DECIMALNUMBER}] = {EXPR};')
ctx.rule(u'DECLARATION', u'{DECLARATIONTYPE} \\{{ARGS}\\} = {EXPR};')
ctx.rule(u'DECLARATIONTYPE', u'var')
ctx.rule(u'DECLARATIONTYPE', u'let')
ctx.rule(u'DECLARATIONTYPE', u'const')
ctx.rule(u'IMPORTNAME', u'*')
ctx.rule(u'IMPORTNAME', u'{METHODNAME}')
ctx.rule(u'CLASSDEF', u'class {IDENTIFIER}\\{\n{CLASSCONTENT}\n\\}\n')
ctx.rule(u'CLASSDEF', u'class {IDENTIFIER}extends {IDENTIFIER}\\{\n{CLASSCONTENT}\n\\}\n')
ctx.rule(u'CLASSCONTENT', u'{AUX_69}')
ctx.rule(u'AUX_69', u'')
ctx.rule(u'AUX_69', u'{GROUP_4}')
ctx.rule(u'GROUP_4', u'{METHODDEF}\n{CLASSCONTENT}')
ctx.rule(u'FUNCTIONDEF', u'function {IDENTIFIER}{FUNCTIONARGS}\\{\n{FUNCTIONBODY}\n\\}\n')
ctx.rule(u'FUNCTIONDEF', u'{IDENTIFIER} => {EXPR}')
ctx.rule(u'FUNCTIONDEF', u'{IDENTIFIER} => \\{\n{FUNCTIONBODY}\n\\}')
ctx.rule(u'FUNCTIONDEF', u'{FUNCTIONARGS} => {EXPR}')
ctx.rule(u'FUNCTIONDEF', u'{FUNCTIONARGS} => \\{\n{FUNCTIONBODY}\n\\}')
ctx.rule(u'METHODDEF', u'{IDENTIFIER}{FUNCTIONARGS}\\{\n{FUNCTIONBODY}\n\\}\n')
ctx.rule(u'FUNCTIONBODY', u'{PROGRAM}')
ctx.rule(u'FUNCTIONARGS', u'()')
ctx.rule(u'FUNCTIONARGS', u'({IDENTIFIERLIST})')
ctx.rule(u'EXPR', u'({EXPR})')
ctx.rule(u'EXPR', u'\\{{OBJMEMBER}\\}')
ctx.rule(u'EXPR', u'{VAR}')
ctx.rule(u'EXPR', u'...{VAR}')
ctx.rule(u'EXPR', u'delete {EXPR}')
ctx.rule(u'EXPR', u'new {IDENTIFIER}{ARGS}')
ctx.rule(u'EXPR', u'await {EXPR}')
ctx.rule(u'EXPR', u'{LITERAL}')
ctx.rule(u'EXPR', u'{IDENTIFIER}')
ctx.rule(u'EXPR', u'{EXPR}={EXPR}')
ctx.rule(u'EXPR', u'{EXPR}+={EXPR}')
ctx.rule(u'EXPR', u'{EXPR}-={EXPR}')
ctx.rule(u'EXPR', u'{EXPR}*={EXPR}')
ctx.rule(u'EXPR', u'{EXPR}/={EXPR}')
ctx.rule(u'EXPR', u'{EXPR}%={EXPR}')
ctx.rule(u'EXPR', u'{EXPR}**={EXPR}')
ctx.rule(u'EXPR', u'{EXPR}<<={EXPR}')
ctx.rule(u'EXPR', u'{EXPR}>>={EXPR}')
ctx.rule(u'EXPR', u'{EXPR}>>>={EXPR}')
ctx.rule(u'EXPR', u'{EXPR}&={EXPR}')
ctx.rule(u'EXPR', u'{EXPR}^={EXPR}')
ctx.rule(u'EXPR', u'{EXPR}|={EXPR}')
ctx.rule(u'EXPR', u'{METHODCALL}')
ctx.rule(u'EXPR', u'({ARITHMETICOPERATION})')
ctx.rule(u'EXPR', u'({COMPARISONOPERATION})')
ctx.rule(u'EXPR', u'({BYTEWISEOPERATION})')
ctx.rule(u'EXPR', u'({LOGICALOPERATION})')
ctx.rule(u'EXPR', u'({EXPR} ? {EXPR} : {EXPR})')
ctx.rule(u'EXPR', u'{EXPR}[{EXPR}]')
ctx.rule(u'ARITHMETICOPERATION', u'{EXPR}/{EXPR}')
ctx.rule(u'ARITHMETICOPERATION', u'{EXPR}*{EXPR}')
ctx.rule(u'ARITHMETICOPERATION', u'{EXPR}+{EXPR}')
ctx.rule(u'ARITHMETICOPERATION', u'{EXPR}-{EXPR}')
ctx.rule(u'ARITHMETICOPERATION', u'{EXPR}%{EXPR}')
ctx.rule(u'ARITHMETICOPERATION', u'{EXPR}**{EXPR}')
ctx.rule(u'ARITHMETICOPERATION', u'{EXPR}++')
ctx.rule(u'ARITHMETICOPERATION', u'++{EXPR}')
ctx.rule(u'ARITHMETICOPERATION', u'--{EXPR}')
ctx.rule(u'ARITHMETICOPERATION', u'{EXPR}--')
ctx.rule(u'BYTEWISEOPERATION', u'{EXPR} & {EXPR}')
ctx.rule(u'BYTEWISEOPERATION', u'{EXPR} | {EXPR}')
ctx.rule(u'BYTEWISEOPERATION', u'{EXPR} ^ {EXPR}')
ctx.rule(u'BYTEWISEOPERATION', u'~{EXPR}')
ctx.rule(u'BYTEWISEOPERATION', u'{EXPR} << {EXPR}')
ctx.rule(u'BYTEWISEOPERATION', u'{EXPR} >> {EXPR}')
ctx.rule(u'BYTEWISEOPERATION', u'{EXPR} >>> {EXPR}')
ctx.rule(u'COMPARISONOPERATION', u'{EXPR}<{EXPR}')
ctx.rule(u'COMPARISONOPERATION', u'{EXPR}>{EXPR}')
ctx.rule(u'COMPARISONOPERATION', u'{EXPR}<={EXPR}')
ctx.rule(u'COMPARISONOPERATION', u'{EXPR}>={EXPR}')
ctx.rule(u'COMPARISONOPERATION', u'{EXPR}=={EXPR}')
ctx.rule(u'COMPARISONOPERATION', u'{EXPR}==={EXPR}')
ctx.rule(u'COMPARISONOPERATION', u'{EXPR}!={EXPR}')
ctx.rule(u'COMPARISONOPERATION', u'{EXPR}<=>{EXPR}')
ctx.rule(u'COMPARISONOPERATION', u'{EXPR}==={EXPR}')
ctx.rule(u'LOGICALOPERATION', u'{EXPR} && {EXPR}')
ctx.rule(u'LOGICALOPERATION', u'{EXPR} || {EXPR}')
ctx.rule(u'LOGICALOPERATION', u'!{EXPR}')
ctx.rule(u'NULL', u'null')
ctx.rule(u'LITERAL', u'{NULL}')
ctx.rule(u'LITERAL', u'{BOOLEAN}')
ctx.rule(u'LITERAL', u'{NUMBER}')
ctx.rule(u'LITERAL', u'{STRING}')
ctx.rule(u'LITERAL', u'{ARRAY}')
ctx.rule(u'LITERAL', u'{REGEX}')
ctx.rule(u'BOOLEAN', u'true')
ctx.rule(u'BOOLEAN', u'false')
ctx.rule(u'ZERO', u'0')
ctx.rule(u'ONE', u'1')
ctx.rule(u'TWO', u'2')
ctx.rule(u'THREE', u'3')
ctx.rule(u'FOUR', u'4')
ctx.rule(u'FIVE', u'5')
ctx.rule(u'SIX', u'6')
ctx.rule(u'SEVEN', u'7')
ctx.rule(u'BINARYDIGITS', u'{ZERO}')
ctx.rule(u'BINARYDIGITS', u'{ONE}')
ctx.rule(u'BINARYDIGITS', u'1010')
ctx.rule(u'BINARYDIGITS', u'1_11')
ctx.rule(u'BINARYDIGITS', u'10_01')
ctx.rule(u'BINARYDIGITS', u'1111111111111111111111111111111')
ctx.rule(u'BINARYDIGITS', u'101010101110101001011010101')
ctx.rule(u'OCTALDIGITS', u'{ZERO}')
ctx.rule(u'OCTALDIGITS', u'{ONE}')
ctx.rule(u'OCTALDIGITS', u'123')
ctx.rule(u'OCTALDIGITS', u'5_0_2')
ctx.rule(u'OCTALDIGITS', u'324')
ctx.rule(u'OCTALDIGITS', u'5__432')
ctx.rule(u'OCTALDIGITS', u'7777777777777777777777')
ctx.rule(u'OCTALDIGITS', u'1247237465234')
ctx.rule(u'OCTALDIGIT', u'{ZERO}')
ctx.rule(u'OCTALDIGIT', u'{ONE}')
ctx.rule(u'OCTALDIGIT', u'{TWO}')
ctx.rule(u'OCTALDIGIT', u'{THREE}')
ctx.rule(u'OCTALDIGIT', u'{FOUR}')
ctx.rule(u'OCTALDIGIT', u'{FIVE}')
ctx.rule(u'OCTALDIGIT', u'{SIX}')
ctx.rule(u'OCTALDIGIT', u'{SEVEN}')
ctx.rule(u'DECIMALDIGITS', u'{ZERO}')
ctx.rule(u'DECIMALDIGITS', u'{ONE}')
ctx.rule(u'DECIMALDIGITS', u'20')
ctx.rule(u'DECIMALDIGITS', u'{ONETWOTHREEFOUR}')
ctx.rule(u'DECIMALDIGITS', u'66')
ctx.rule(u'DECIMALDIGITS', u'234_9')
ctx.rule(u'DECIMALDIGITS', u'99999999999999999999')
ctx.rule(u'DECIMALDIGITS', u'12345678123456')
ctx.rule(u'HEXDIGITS', u'{ZERO}')
ctx.rule(u'HEXDIGITS', u'ABCFDFE0_1203453abcd')
ctx.rule(u'HEXDIGITS', u'{ONE}')
ctx.rule(u'HEXDIGITS', u'{ONETWOTHREEFOUR}')
ctx.rule(u'HEXDIGITS', u'1asdf')
ctx.rule(u'HEXDIGITS', u'A1')
ctx.rule(u'HEXDIGITS', u'1F_F')
ctx.rule(u'HEXDIGITS', u'4346')
ctx.rule(u'HEXDIGITS', u'FE_D983')
ctx.rule(u'HEXDIGITS', u'FFFFFFFFFF')
ctx.rule(u'ONETWOTHREEFOUR', u'1234')
ctx.rule(u'HEXDIGIT', u'{ZERO}')
ctx.rule(u'HEXDIGIT', u'{ONE}')
ctx.rule(u'HEXDIGIT', u'{TWO}')
ctx.rule(u'HEXDIGIT', u'{THREE}')
ctx.rule(u'HEXDIGIT', u'{FOUR}')
ctx.rule(u'HEXDIGIT', u'{FIVE}')
ctx.rule(u'HEXDIGIT', u'{SIX}')
ctx.rule(u'HEXDIGIT', u'{SEVEN}')
ctx.rule(u'HEXDIGIT', u'8')
ctx.rule(u'HEXDIGIT', u'9')
ctx.rule(u'HEXDIGIT', u'A')
ctx.rule(u'HEXDIGIT', u'B')
ctx.rule(u'HEXDIGIT', u'C')
ctx.rule(u'HEXDIGIT', u'D')
ctx.rule(u'HEXDIGIT', u'E')
ctx.rule(u'HEXDIGIT', u'F')
ctx.rule(u'BINNUMBER', u'0b{BINARYDIGITS}')
ctx.rule(u'BINNUMBER', u'0B{BINARYDIGITS}')
ctx.rule(u'EXPONENT', u'e{DECIMALDIGITS}')
ctx.rule(u'EXPONENT', u'e-{DECIMALDIGITS}')
ctx.rule(u'EXPONENT', u'E{DECIMALDIGITS}')
ctx.rule(u'EXPONENT', u'E-{DECIMALDIGITS}')
ctx.rule(u'DECIMALNUMBER', u'{DECIMALDIGITS}')
ctx.rule(u'DECIMALNUMBER', u'0D{DECIMALDIGITS}')
ctx.rule(u'DECIMALNUMBER', u'0d{DECIMALDIGITS}')
ctx.rule(u'HEXNUMBER', u'0x{HEXDIGITS}')
ctx.rule(u'HEXNUMBER', u'0X{HEXDIGITS}')
ctx.rule(u'OCTALNUMBER', u'0O{OCTALDIGITS}')
ctx.rule(u'OCTALNUMBER', u'0o{OCTALDIGITS}')
ctx.rule(u'OCTALNUMBER', u'0{OCTALDIGITS}')
ctx.rule(u'FLOATNUMBER', u'{DECIMALNUMBER}.{DECIMALDIGITS}')
ctx.rule(u'FLOATNUMBER', u'{OCTALNUMBER}.{OCTALDIGITS}')
ctx.rule(u'FLOATNUMBER', u'{HEXNUMBER}.{HEXDIGITS}')
ctx.rule(u'FLOATNUMBER', u'{DECIMALNUMBER}.{DECIMALDIGITS}{EXPONENT}')
ctx.rule(u'FLOATNUMBER', u'{OCTALNUMBER}.{OCTALDIGITS}{EXPONENT}')
ctx.rule(u'FLOATNUMBER', u'{HEXNUMBER}.{HEXDIGITS}{EXPONENT}')
ctx.rule(u'NUMBER', u'{OCTALNUMBER}')
ctx.rule(u'NUMBER', u'{FLOATNUMBER}')
ctx.rule(u'NUMBER', u'{HEXNUMBER}')
ctx.rule(u'NUMBER', u'{DECIMALNUMBER}')
ctx.rule(u'NUMBER', u'{BINNUMBER}')
ctx.rule(u'NUMBER', u'{ZERO}')
ctx.rule(u'NUMBER', u'{ONE}')
ctx.rule(u'NUMBER', u'1.00')
ctx.rule(u'NUMBER', u'1/2')
ctx.rule(u'NUMBER', u'1E2')
ctx.rule(u'NUMBER', u'1E02')
ctx.rule(u'NUMBER', u'1E+02')
ctx.rule(u'NUMBER', u'-1')
ctx.rule(u'NUMBER', u'-1.00')
ctx.rule(u'NUMBER', u'-1/2')
ctx.rule(u'NUMBER', u'-1E2')
ctx.rule(u'NUMBER', u'-1E02')
ctx.rule(u'NUMBER', u'-1E+02')
ctx.rule(u'NUMBER', u'1/0')
ctx.rule(u'NUMBER', u'0/0')
ctx.rule(u'NUMBER', u'-2147483648/-1')
ctx.rule(u'NUMBER', u'-9223372036854775808/-1')
ctx.rule(u'NUMBER', u'-0')
ctx.rule(u'NUMBER', u'-0.0')
ctx.rule(u'NUMBER', u'+0')
ctx.rule(u'NUMBER', u'+0.0')
ctx.rule(u'NUMBER', u'0.00')
ctx.rule(u'NUMBER', u'.')
ctx.rule(u'NUMBER', u'0,00')
ctx.rule(u'NUMBER', u'0.0/0')
ctx.rule(u'NUMBER', u'1.0/0.0')
ctx.rule(u'NUMBER', u'0.0/0.0')
ctx.rule(u'NUMBER', u'1,0/0,0')
ctx.rule(u'NUMBER', u'0,0/0,0')
ctx.rule(u'NUMBER', u'--1')
ctx.rule(u'NUMBER', u'999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999')
ctx.rule(u'NUMBER', u'0x0')
ctx.rule(u'NUMBER', u'0xffffffff')
ctx.rule(u'NUMBER', u'0xffffffffffffffff')
ctx.rule(u'NUMBER', u'0xabad1dea')
ctx.rule(u'NUMBER', u'123456789012345678901234567890123456789')
ctx.rule(u'NUMBER', u'1000.00')
ctx.rule(u'NUMBER', u'1000000.00')
ctx.rule(u'NUMBER', u'100000.000')
ctx.rule(u'NUMBER', u'100000000')
ctx.rule(u'NUMBER', u'01000')
ctx.rule(u'NUMBER', u'08')
ctx.rule(u'NUMBER', u'09')
ctx.rule(u'NUMBER', u'2.2250738585072011e-308')
ctx.rule(u'DOUBLEQUOTEDSTRING', u'{NAUGHTYSTRING}')
ctx.rule(u'DOUBLEQUOTEDSTRING', u' {DOUBLEQUOTEDSTRING}')
ctx.rule(u'DOUBLEQUOTEDSTRING', u'{NUMBER}{DOUBLEQUOTEDSTRING}')
ctx.rule(u'DOUBLEQUOTEDSTRING', u'{ESCAPEDCHARACTERS}{DOUBLEQUOTEDSTRING}')
ctx.rule(u'DOUBLEQUOTEDSTRING', u'#\\{{EXPR}\\}{DOUBLEQUOTEDSTRING}')
ctx.rule(u'TEMPLATESTRING', u'{AUX_70}')
ctx.rule(u'AUX_70', u'')
ctx.rule(u'AUX_70', u'{GROUP_5}')
ctx.rule(u'GROUP_5', u'{DOUBLEQUOTEDSTRING}$\\{{EXPR}\\}{TEMPLATESTRING}')
ctx.rule(u'STRING', u'"{DOUBLEQUOTEDSTRING}"')
ctx.rule(u'STRING', u'\'{DOUBLEQUOTEDSTRING}\'')
ctx.rule(u'STRING', u'`{TEMPLATESTRING}`')
ctx.rule(u'ARRAY', u'[{ARRAYCONTENT}]')
ctx.rule(u'ARRAY', u'[]')
ctx.rule(u'ARRAYCONTENT', u'{EXPR}{AUX_71}')
ctx.rule(u'AUX_71', u'')
ctx.rule(u'AUX_71', u'{GROUP_6}')
ctx.rule(u'GROUP_6', u', {ARRAYCONTENT}')
ctx.rule(u'REGEX', u'/{REGEXPATTERN}/')
ctx.rule(u'REGEX', u'/{REGEXPATTERN}/g')
ctx.rule(u'REGEX', u'/{REGEXPATTERN}/i')
ctx.rule(u'REGEX', u'/{REGEXPATTERN}/m')
ctx.rule(u'REGEX', u'/{REGEXPATTERN}/y')
ctx.rule(u'REGEXPATTERN', u'{DOUBLEQUOTEDSTRING}')
ctx.rule(u'ESCAPEDCHARACTERS', u'\\\\')
ctx.rule(u'ESCAPEDCHARACTERS', u'\\\'')
ctx.rule(u'ESCAPEDCHARACTERS', u'\\"')
ctx.rule(u'ESCAPEDCHARACTERS', u'\\0')
ctx.rule(u'ESCAPEDCHARACTERS', u'\\a')
ctx.rule(u'ESCAPEDCHARACTERS', u'\\b')
ctx.rule(u'ESCAPEDCHARACTERS', u'\\f')
ctx.rule(u'ESCAPEDCHARACTERS', u'\\n')
ctx.rule(u'ESCAPEDCHARACTERS', u'\\r')
ctx.rule(u'ESCAPEDCHARACTERS', u'\\#')
ctx.rule(u'ESCAPEDCHARACTERS', u'\\t')
ctx.rule(u'ESCAPEDCHARACTERS', u'\\u{HEXDIGIT}{HEXDIGIT}{HEXDIGIT}{HEXDIGIT}')
ctx.rule(u'ESCAPEDCHARACTERS', u'\\v')
ctx.rule(u'ESCAPEDCHARACTERS', u'\\0{OCTALDIGIT}{OCTALDIGIT}')
ctx.rule(u'ESCAPEDCHARACTERS', u'\\x{HEXDIGIT}{HEXDIGIT}')
ctx.rule(u'HASOWNPROPERTY', u'hasOwnProperty')
ctx.rule(u'NAUGHTYSTRING', u'{UNDEFINED}')
ctx.rule(u'NAUGHTYSTRING', u'undef')
ctx.rule(u'NAUGHTYSTRING', u'en-US')
ctx.rule(u'NAUGHTYSTRING', u'year')
ctx.rule(u'NAUGHTYSTRING', u'{NULL}')
ctx.rule(u'NAUGHTYSTRING', u'NULL')
ctx.rule(u'NAUGHTYSTRING', u'(null)')
ctx.rule(u'NAUGHTYSTRING', u'nil')
ctx.rule(u'NAUGHTYSTRING', u'NIL')
ctx.rule(u'NAUGHTYSTRING', u'{BOOLEAN}')
ctx.rule(u'NAUGHTYSTRING', u'True')
ctx.rule(u'NAUGHTYSTRING', u'False')
ctx.rule(u'NAUGHTYSTRING', u'TRUE')
ctx.rule(u'NAUGHTYSTRING', u'FALSE')
ctx.rule(u'NAUGHTYSTRING', u'None')
ctx.rule(u'NAUGHTYSTRING', u'{HASOWNPROPERTY}')
ctx.rule(u'NAUGHTYSTRING', u',./;\'[]\\-=')
ctx.rule(u'NAUGHTYSTRING', u'<>?:"\\{\\}|_+')
ctx.rule(u'NAUGHTYSTRING', u'!@#$%^&*()`~')
ctx.rule(u'NAUGHTYSTRING', u' ')
ctx.rule(u'NAUGHTYSTRING', u'%')
ctx.rule(u'NAUGHTYSTRING', u'_')
ctx.rule(u'NAUGHTYSTRING', u'-')
ctx.rule(u'NAUGHTYSTRING', u'--')
ctx.rule(u'NAUGHTYSTRING', u'--version')
ctx.rule(u'NAUGHTYSTRING', u'--help')
ctx.rule(u'NAUGHTYSTRING', u'$USER')
ctx.rule(u'NAUGHTYSTRING', u'`ls -al /`')
ctx.rule(u'NAUGHTYSTRING', u'<<< %s(un=\'%s\') = %u')
ctx.rule(u'NAUGHTYSTRING', u'+++ATH0')
ctx.rule(u'NAUGHTYSTRING', u'CON')
ctx.rule(u'NAUGHTYSTRING', u'PRN')
ctx.rule(u'NAUGHTYSTRING', u'AUX')
ctx.rule(u'NAUGHTYSTRING', u'CLOCK$')
ctx.rule(u'NAUGHTYSTRING', u'NUL')
ctx.rule(u'NAUGHTYSTRING', u'A:')
ctx.rule(u'NAUGHTYSTRING', u'ZZ:')
ctx.rule(u'NAUGHTYSTRING', u'COM1')
ctx.rule(u'NAUGHTYSTRING', u'LPT1')
ctx.rule(u'NAUGHTYSTRING', u'COM2')
ctx.rule(u'NAUGHTYSTRING', u'DCC SEND STARTKEYLOGGER 0 0 0')
ctx.rule(u'NAUGHTYSTRING', u'https://www.google.com/')
ctx.rule(u'IDENTIFIER', u'Object')
ctx.rule(u'IDENTIFIER', u'{VAR}')
ctx.rule(u'IDENTIFIER', u'Function')
ctx.rule(u'IDENTIFIER', u'main')
ctx.rule(u'IDENTIFIER', u'opt')
ctx.rule(u'IDENTIFIER', u'Boolean')
ctx.rule(u'IDENTIFIER', u'Symbol')
ctx.rule(u'IDENTIFIER', u'JSON')
ctx.rule(u'IDENTIFIER', u'Error')
ctx.rule(u'IDENTIFIER', u'EvalError')
ctx.rule(u'IDENTIFIER', u'RangeError')
ctx.rule(u'IDENTIFIER', u'ReferenceError')
ctx.rule(u'IDENTIFIER', u'SyntaxError')
ctx.rule(u'IDENTIFIER', u'TypeError')
ctx.rule(u'IDENTIFIER', u'URIError')
ctx.rule(u'IDENTIFIER', u'this')
ctx.rule(u'IDENTIFIER', u'Number')
ctx.rule(u'IDENTIFIER', u'Math')
ctx.rule(u'IDENTIFIER', u'Date')
ctx.rule(u'IDENTIFIER', u'String')
ctx.rule(u'IDENTIFIER', u'RegExp')
ctx.rule(u'IDENTIFIER', u'Array')
ctx.rule(u'IDENTIFIER', u'Int8Array')
ctx.rule(u'IDENTIFIER', u'Uint8Array')
ctx.rule(u'IDENTIFIER', u'Uint8ClampedArray')
ctx.rule(u'IDENTIFIER', u'Int16Array')
ctx.rule(u'IDENTIFIER', u'Uint16Array')
ctx.rule(u'IDENTIFIER', u'Int32Array')
ctx.rule(u'IDENTIFIER', u'Uint32Array')
ctx.rule(u'IDENTIFIER', u'Float32Array')
ctx.rule(u'IDENTIFIER', u'Float64Array')
ctx.rule(u'IDENTIFIER', u'DataView')
ctx.rule(u'IDENTIFIER', u'ArrayBuffer')
ctx.rule(u'IDENTIFIER', u'Map')
ctx.rule(u'IDENTIFIER', u'Set')
ctx.rule(u'IDENTIFIER', u'WeakMap')
ctx.rule(u'IDENTIFIER', u'WeakSet')
ctx.rule(u'IDENTIFIER', u'Promise')
ctx.rule(u'IDENTIFIER', u'AsyncFunction')
ctx.rule(u'IDENTIFIER', u'asyncGenerator')
ctx.rule(u'IDENTIFIER', u'Reflect')
ctx.rule(u'IDENTIFIER', u'Proxy')
ctx.rule(u'IDENTIFIER', u'Intl')
ctx.rule(u'IDENTIFIER', u'Intl.Collator')
ctx.rule(u'IDENTIFIER', u'Intl.DateTimeFormat')
ctx.rule(u'IDENTIFIER', u'Intl.NumberFormat')
ctx.rule(u'IDENTIFIER', u'Intl.PluralRules')
ctx.rule(u'IDENTIFIER', u'WebAssembly')
ctx.rule(u'IDENTIFIER', u'WebAssembly.Module')
ctx.rule(u'IDENTIFIER', u'WebAssembly.Instance')
ctx.rule(u'IDENTIFIER', u'WebAssembly.Memory')
ctx.rule(u'IDENTIFIER', u'WebAssembly.Table')
ctx.rule(u'IDENTIFIER', u'WebAssembly.CompileError')
ctx.rule(u'IDENTIFIER', u'WebAssembly.LinkError')
ctx.rule(u'IDENTIFIER', u'WebAssembly.RuntimeError')
ctx.rule(u'IDENTIFIER', u'arguments')
ctx.rule(u'IDENTIFIER', u'Infinity')
ctx.rule(u'IDENTIFIER', u'NaN')
ctx.rule(u'IDENTIFIER', u'{UNDEFINED}')
ctx.rule(u'IDENTIFIER', u'{NULL}')
ctx.rule(u'IDENTIFIER', u'console')
ctx.rule(u'UNDEFINED', u'undefined')
ctx.rule(u'SIMDTYPE', u'{SIMDTYPEBOOL}')
ctx.rule(u'SIMDTYPE', u'{SIMDTYPEINT}')
ctx.rule(u'SIMDTYPE', u'{SIMDTYPEUINT}')
ctx.rule(u'SIMDTYPE', u'{SIMDTYPEFLOAT}')
ctx.rule(u'SIMDTYPEBOOL', u'Bool8x16')
ctx.rule(u'SIMDTYPEBOOL', u'Bool16x8')
ctx.rule(u'SIMDTYPEBOOL', u'Bool32x4')
ctx.rule(u'SIMDTYPEBOOL', u'Bool64x2')
ctx.rule(u'SIMDTYPEINT', u'Int8x16')
ctx.rule(u'SIMDTYPEINT', u'Int16x8')
ctx.rule(u'SIMDTYPEINT', u'Int32x4')
ctx.rule(u'SIMDTYPEUINT', u'Uint8x16')
ctx.rule(u'SIMDTYPEUINT', u'Uint16x8')
ctx.rule(u'SIMDTYPEUINT', u'Uint32x4')
ctx.rule(u'SIMDTYPEFLOAT', u'Float32x4')
ctx.rule(u'SIMDTYPEFLOAT', u'Float64x2')
ctx.rule(u'SIMDFUNCTION', u'splat')
ctx.rule(u'SIMDFUNCTION', u'check')
ctx.rule(u'SIMDFUNCTION', u'extractLane')
ctx.rule(u'SIMDFUNCTION', u'replaceLane')
ctx.rule(u'SIMDFUNCTION', u'load')
ctx.rule(u'SIMDFUNCTION', u'load1')
ctx.rule(u'SIMDFUNCTION', u'load2')
ctx.rule(u'SIMDFUNCTION', u'load3')
ctx.rule(u'SIMDFUNCTION', u'store')
ctx.rule(u'SIMDFUNCTION', u'store1')
ctx.rule(u'SIMDFUNCTION', u'store2')
ctx.rule(u'SIMDFUNCTION', u'store3')
ctx.rule(u'SIMDFUNCTION', u'abs')
ctx.rule(u'SIMDFUNCTION', u'add')
ctx.rule(u'SIMDFUNCTION', u'addSaturate')
ctx.rule(u'SIMDFUNCTION', u'div')
ctx.rule(u'SIMDFUNCTION', u'mul')
ctx.rule(u'SIMDFUNCTION', u'sub')
ctx.rule(u'SIMDFUNCTION', u'subSaturate')
ctx.rule(u'SIMDFUNCTION', u'sqrt')
ctx.rule(u'SIMDFUNCTION', u'select')
ctx.rule(u'SIMDFUNCTION', u'neg')
ctx.rule(u'SIMDFUNCTION', u'reciprocalApproximation')
ctx.rule(u'SIMDFUNCTION', u'reciprocalSqrtApproximation')
ctx.rule(u'SIMDFUNCTION', u'shuffle')
ctx.rule(u'SIMDFUNCTION', u'swizzle')
ctx.rule(u'SIMDFUNCTION', u'max')
ctx.rule(u'SIMDFUNCTION', u'maxNum')
ctx.rule(u'SIMDFUNCTION', u'min')
ctx.rule(u'SIMDFUNCTION', u'minNum')
ctx.rule(u'SIMDFUNCTION', u'equal')
ctx.rule(u'SIMDFUNCTION', u'notEqual')
ctx.rule(u'SIMDFUNCTION', u'lessThan')
ctx.rule(u'SIMDFUNCTION', u'lessThanOrEqual')
ctx.rule(u'SIMDFUNCTION', u'greaterThan')
ctx.rule(u'SIMDFUNCTION', u'greaterThanOrEqual')
ctx.rule(u'SIMDFUNCTION', u'and')
ctx.rule(u'SIMDFUNCTION', u'or')
ctx.rule(u'SIMDFUNCTION', u'xor')
ctx.rule(u'SIMDFUNCTION', u'not')
ctx.rule(u'SIMDFUNCTION', u'shiftLeftByScalar')
ctx.rule(u'SIMDFUNCTION', u'shiftRightByScalar')
ctx.rule(u'SIMDFUNCTION', u'allTrue')
ctx.rule(u'SIMDFUNCTION', u'anyTrue')
ctx.rule(u'SIMDFUNCTION', u'fromFloat32x4')
ctx.rule(u'SIMDFUNCTION', u'fromFloat32x4Bits')
ctx.rule(u'SIMDFUNCTION', u'fromFloat64x2Bits')
ctx.rule(u'SIMDFUNCTION', u'fromInt32x4')
ctx.rule(u'SIMDFUNCTION', u'fromInt32x4Bits')
ctx.rule(u'SIMDFUNCTION', u'fromInt16x8Bits')
ctx.rule(u'SIMDFUNCTION', u'fromInt8x16Bits')
ctx.rule(u'SIMDFUNCTION', u'fromUint32x4')
ctx.rule(u'SIMDFUNCTION', u'fromUint32x4Bits')
ctx.rule(u'SIMDFUNCTION', u'fromUint16x8Bits')
ctx.rule(u'SIMDFUNCTION', u'fromUint8x16Bits')

